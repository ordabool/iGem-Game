{"version":3,"sources":["components/Level1/Level1.js","App.js","reportWebVitals.js","index.js"],"names":["inputIdPrefix","Level1","feedback","useState","base1","base2","base3","combination","setCombination","fullComb","acidKey","acids","value","combinations","includes","fullname","className","id","type","onKeyDown","keyPressed","e","preventDefault","stopPropagation","currentInputIdNum","parseInt","target","slice","key","prevInputId","document","getElementById","focus","bases","toUpperCase","nextInputId","currentInputId","newCombination","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"k6DAKMA,EAAgB,OAgGPC,MA5Ff,WACC,IAMIC,EANJ,EAAsCC,mBAAS,CAC9CC,MAAO,GACPC,MAAO,GACPC,MAAO,KAHR,mBAAOC,EAAP,KAAoBC,EAApB,KAaA,GALCD,EAAYH,OAASG,EAAYF,OAASE,EAAYD,MAKhC,CACtB,IAAIG,EACHF,EAAYH,MAAQG,EAAYF,MAAQE,EAAYD,MACrD,IAAK,IAAII,KAAWC,EAAO,CAC1B,IAAIC,EAAQD,EAAMD,GACdE,EAAMC,aAAaC,SAASL,KAC/BP,EACC,qCACC,2CAAcQ,EAAd,OACA,8BACEE,EAAMG,SADR,KACoBL,EADpB,YASL,OACC,sBAAKM,UAAU,wBAAf,UACC,wCACA,uDAEA,uBACCC,GAAIjB,QACJgB,UAAU,aACVE,KAAM,OACNC,UAAWC,IAEZ,uBACCH,GAAIjB,QACJgB,UAAU,aACVE,KAAM,OACNC,UAAWC,IAEZ,uBACCH,GAAIjB,QACJgB,UAAU,aACVE,KAAM,OACNC,UAAWC,IAGXlB,KAUH,SAASkB,EAAWC,GACnBA,EAAEC,iBACFD,EAAEE,kBACF,IAAIC,EAAoBC,SAASJ,EAAEK,OAAOT,GAAGU,OAAO,IAChDC,EAAMP,EAAEO,IACZ,GAAW,aAAPA,GAEH,GADAP,EAAEK,OAAOd,MAAQ,GACbY,EA5EgB,EA4EoB,CACvC,IAAIK,EAAc7B,GAAiBwB,EAAoB,GACvDM,SAASC,eAAeF,GAAaG,cAEhC,GAAIC,IAAMnB,SAASc,EAAIM,iBAC7Bb,EAAEK,OAAOd,MAAQgB,EAAIM,cACjBV,EAjFgB,GAiFoB,CACvC,IAAIW,EAAcnC,GAAiBwB,EAAoB,GACvDM,SAASC,eAAeI,GAAaH,QAIvC,IAAII,EAAiBpC,EAAgBwB,EACjCa,EAAc,eAAQ9B,GAC1B8B,EAAeD,GAAkBf,EAAEK,OAAOd,MAC1CJ,EAAe6B,KCnFFC,MARf,WACC,OACC,qBAAKtB,UAAU,MAAf,SACC,cAAC,EAAD,OCGYuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BQ,M","file":"static/js/main.f606282e.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport acids from \"../../data/acids.json\";\nimport { bases } from \"../../data/bases.json\";\nimport \"./Level1.css\";\n\nconst inputIdPrefix = \"base\";\nconst minInputNumber = 1;\nconst maxInputNumber = 3;\n\nfunction Level1() {\n\tconst [combination, setCombination] = useState({\n\t\tbase1: \"\",\n\t\tbase2: \"\",\n\t\tbase3: \"\",\n\t});\n\n\tlet feedback;\n\tlet isFullCombination =\n\t\tcombination.base1 && combination.base2 && combination.base3;\n\n\t// Build the feedback for the player. There are 2 options:\n\t// 1 - The bases are a valid acid! show it to the player and (TODO:) display additional info\n\t// 2 - TODO: The player has already found this amino acid\n\tif (isFullCombination) {\n\t\tlet fullComb =\n\t\t\tcombination.base1 + combination.base2 + combination.base3;\n\t\tfor (var acidKey in acids) {\n\t\t\tvar value = acids[acidKey];\n\t\t\tif (value.combinations.includes(fullComb)) {\n\t\t\t\tfeedback = (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>You found {acidKey}!</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{value.fullname} ({acidKey})\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"container text-center\">\n\t\t\t<h3>Level1</h3>\n\t\t\t<p> Explanation paragraph</p>\n\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"1\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"2\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"3\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\n\t\t\t{feedback}\n\n\t\t\t{/* TODO: display a list of the successfully found acids */}\n\t\t</div>\n\t);\n\n\t// Handle the user's keypress. There are 3 cases:\n\t// 1 - This is a valid base letter (A,C,U,G)\n\t// 2 - This is a backspace button in order to delete the value\n\t// 3 - Unsopported keypress\n\tfunction keyPressed(e) {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tlet currentInputIdNum = parseInt(e.target.id.slice(-1));\n\t\tlet key = e.key;\n\t\tif (key == \"Backspace\") {\n\t\t\te.target.value = \"\";\n\t\t\tif (currentInputIdNum > minInputNumber) {\n\t\t\t\tlet prevInputId = inputIdPrefix + (currentInputIdNum - 1);\n\t\t\t\tdocument.getElementById(prevInputId).focus();\n\t\t\t}\n\t\t} else if (bases.includes(key.toUpperCase())) {\n\t\t\te.target.value = key.toUpperCase();\n\t\t\tif (currentInputIdNum < maxInputNumber) {\n\t\t\t\tlet nextInputId = inputIdPrefix + (currentInputIdNum + 1);\n\t\t\t\tdocument.getElementById(nextInputId).focus();\n\t\t\t}\n\t\t}\n\n\t\tlet currentInputId = inputIdPrefix + currentInputIdNum;\n\t\tlet newCombination = { ...combination };\n\t\tnewCombination[currentInputId] = e.target.value;\n\t\tsetCombination(newCombination);\n\t}\n}\n\nexport default Level1;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Level1 from \"./components/Level1/Level1\";\nimport Menu from \"./components/Menu/Menu\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Level1 />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}