{"version":3,"sources":["components/AminoAcidsLevel/AminoAcidsLevel.js","App.js","reportWebVitals.js","index.js"],"names":["inputIdPrefix","AminoAcidsLevel","useState","base1","base2","base3","combination","setCombination","discoveredAcids","setDiscoveredAcids","feedback","setFeedback","foundOutput","setFoundOutput","useEffect","initialAcidsState","acids","acidsCount","acidsFoundCount","acidKey","fullComb","value","combinations","includes","fullname","className","info","newDiscoveredAcids","console","log","Object","keys","map","i","id","type","onKeyDown","keyPressed","e","preventDefault","stopPropagation","currentInputIdNum","parseInt","target","slice","key","prevInputId","document","getElementById","focus","bases","toUpperCase","nextInputId","currentInputId","newCombination","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.682d27e0.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport acids from \"../../data/acids.json\";\nimport { bases } from \"../../data/bases.json\";\nimport \"./AminoAcidsLevel.css\";\n\nconst inputIdPrefix = \"base\";\nconst minInputNumber = 1;\nconst maxInputNumber = 3;\n\nfunction AminoAcidsLevel() {\n\tconst [combination, setCombination] = useState({\n\t\tbase1: \"\",\n\t\tbase2: \"\",\n\t\tbase3: \"\",\n\t});\n\tconst [discoveredAcids, setDiscoveredAcids] = useState({});\n\tconst [feedback, setFeedback] = useState();\n\tconst [foundOutput, setFoundOutput] = useState();\n\n\t// Initialize discoveredAcids as a list of all the acids set to false, and a counter\n\tuseEffect(() => {\n\t\tlet initialAcidsState = {\n\t\t\tacids: [],\n\t\t\tacidsCount: 0,\n\t\t\tacidsFoundCount: 0,\n\t\t};\n\t\tlet acidsCount = 0;\n\t\tfor (let acidKey in acids) {\n\t\t\tinitialAcidsState.acids[acidKey] = false;\n\t\t\tacidsCount++;\n\t\t}\n\t\tinitialAcidsState.acidsCount = acidsCount;\n\t\tsetDiscoveredAcids(initialAcidsState);\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// Build the feedback for the player. There are 2 options:\n\t\t// 1 - The bases are a valid acid! show it to the player and (TODO:) display additional info\n\t\t// 2 - TODO: The player has already found this amino acid\n\t\tlet isFullCombination =\n\t\t\tcombination.base1 && combination.base2 && combination.base3;\n\t\tif (isFullCombination) {\n\t\t\tlet fullComb =\n\t\t\t\tcombination.base1 + combination.base2 + combination.base3;\n\t\t\tfor (let acidKey in acids) {\n\t\t\t\tlet value = acids[acidKey];\n\t\t\t\tif (value.combinations.includes(fullComb)) {\n\t\t\t\t\tlet alreadyFound = discoveredAcids.acids[acidKey];\n\t\t\t\t\tif (alreadyFound) {\n\t\t\t\t\t\tsetFeedback(\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>{acidKey} already found!</p>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetFeedback(\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{value.fullname} ({acidKey})\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"explanation\">{value.info}</p>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlet newDiscoveredAcids = { ...discoveredAcids };\n\t\t\t\t\t\tnewDiscoveredAcids.acids[acidKey] = true;\n\t\t\t\t\t\tsetDiscoveredAcids(newDiscoveredAcids);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet acidsFoundCount = 0;\n\t\tfor (let acidKey in discoveredAcids.acids) {\n\t\t\tif (discoveredAcids.acids[acidKey]) {\n\t\t\t\tacidsFoundCount++;\n\t\t\t}\n\t\t}\n\t\tconsole.log(\n\t\t\t\"newState\",\n\t\t\t{ ...discoveredAcids, acidsFoundCount },\n\t\t\tdiscoveredAcids\n\t\t);\n\t\tsetDiscoveredAcids((discoveredAcids) => ({\n\t\t\t...discoveredAcids,\n\t\t\tacidsFoundCount,\n\t\t}));\n\t\t// setDiscoveredAcids({ ...discoveredAcids, acidsFoundCount });\n\t}, [combination]);\n\n\tuseEffect(() => {\n\t\tsetFoundOutput(\n\t\t\t<>\n\t\t\t\t<hr className=\"resultsSeperator\" />\n\t\t\t\t<h4>\n\t\t\t\t\tYou found: ({discoveredAcids.acidsFoundCount} /\n\t\t\t\t\t{discoveredAcids.acidsCount})\n\t\t\t\t</h4>\n\t\t\t\t<ul>\n\t\t\t\t\t{discoveredAcids.acids &&\n\t\t\t\t\t\tObject.keys(discoveredAcids.acids).map((acidKey, i) => {\n\t\t\t\t\t\t\tconsole.log(discoveredAcids.acids[acidKey]);\n\t\t\t\t\t\t\tif (discoveredAcids.acids[acidKey]) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={i}>{acids[acidKey].fullname}</li>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</>\n\t\t);\n\t}, [discoveredAcids]);\n\n\treturn (\n\t\t<div className=\"container text-center\">\n\t\t\t<h2>Amino Acids</h2>\n\t\t\t<p className=\"explanation\">\n\t\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n\t\t\t\teiusmod tempor incididunt ut labore et dolore magna aliqua. Vel\n\t\t\t\tfacilisis volutpat est velit egestas. Adipiscing vitae proin\n\t\t\t\tsagittis nisl rhoncus mattis rhoncus urna. Consequat id porta\n\t\t\t\tnibh venenatis cras sed felis eget velit. Convallis convallis\n\t\t\t\ttellus id interdum velit laoreet id. Nulla facilisi cras\n\t\t\t\tfermentum odio eu. Mattis nunc sed blandit libero. Etiam erat\n\t\t\t\tvelit scelerisque in. Aliquet porttitor lacus luctus accumsan\n\t\t\t\ttortor. Potenti nullam ac tortor vitae purus faucibus. Risus\n\t\t\t\tpretium quam vulputate dignissim. Id diam maecenas ultricies mi\n\t\t\t\teget. Facilisis mauris sit amet massa vitae. Lectus mauris\n\t\t\t\tultrices eros in cursus turpis massa tincidunt. Sit amet\n\t\t\t\tfacilisis magna etiam tempor orci. Eu consequat ac felis donec.\n\t\t\t\tDonec adipiscing tristique risus nec feugiat in fermentum\n\t\t\t\tposuere urna.\n\t\t\t</p>\n\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"1\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"2\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"3\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\n\t\t\t{feedback}\n\n\t\t\t{/* TODO: display a list of the successfully found acids */}\n\n\t\t\t{foundOutput}\n\t\t</div>\n\t);\n\n\t// Handle the user's keypress. There are 3 cases:\n\t// 1 - This is a valid base letter (A,C,U,G)\n\t// 2 - This is a backspace button in order to delete the value\n\t// 3 - Unsopported keypress\n\tfunction keyPressed(e) {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tlet currentInputIdNum = parseInt(e.target.id.slice(-1));\n\t\tlet key = e.key;\n\t\tif (key === \"Backspace\") {\n\t\t\te.target.value = \"\";\n\t\t\tif (currentInputIdNum > minInputNumber) {\n\t\t\t\tlet prevInputId = inputIdPrefix + (currentInputIdNum - 1);\n\t\t\t\tdocument.getElementById(prevInputId).focus();\n\t\t\t}\n\t\t} else if (bases.includes(key.toUpperCase())) {\n\t\t\te.target.value = key.toUpperCase();\n\t\t\tif (currentInputIdNum < maxInputNumber) {\n\t\t\t\tlet nextInputId = inputIdPrefix + (currentInputIdNum + 1);\n\t\t\t\tdocument.getElementById(nextInputId).focus();\n\t\t\t}\n\t\t}\n\n\t\tlet currentInputId = inputIdPrefix + currentInputIdNum;\n\t\tlet newCombination = { ...combination };\n\t\tnewCombination[currentInputId] = e.target.value;\n\t\tsetCombination(newCombination);\n\t}\n}\n\nexport default AminoAcidsLevel;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport AminoAcidsLevel from \"./components/AminoAcidsLevel/AminoAcidsLevel\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"App\">\n\t\t\t\t<AminoAcidsLevel />\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\t// Used this guide for connectivity with Github Pages\n\t// https://betterprogramming.pub/how-to-host-your-react-app-on-github-pages-for-free-919ad201a4cb\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}