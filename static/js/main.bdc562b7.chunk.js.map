{"version":3,"sources":["components/AminoAcidsLevel/AminoAcidsLevel.js","App.js","reportWebVitals.js","index.js"],"names":["inputIdPrefix","AminoAcidsLevel","useState","base1","base2","base3","combination","setCombination","discoveredAcids","setDiscoveredAcids","feedback","setFeedback","foundOutput","setFoundOutput","useEffect","initialAcidsState","acids","acidsCount","acidsFoundCount","acidKey","fullComb","value","combinations","includes","fullname","info","newDiscoveredAcids","className","Object","keys","map","i","id","type","onKeyDown","keyPressed","e","preventDefault","stopPropagation","currentInputIdNum","parseInt","target","slice","key","prevInputId","document","getElementById","focus","bases","toUpperCase","nextInputId","currentInputId","newCombination","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bdc562b7.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport acids from \"../../data/acids.json\";\nimport { bases } from \"../../data/bases.json\";\nimport \"./AminoAcidsLevel.css\";\n\nconst inputIdPrefix = \"base\";\nconst minInputNumber = 1;\nconst maxInputNumber = 3;\n\nfunction AminoAcidsLevel() {\n\tconst [combination, setCombination] = useState({\n\t\tbase1: \"\",\n\t\tbase2: \"\",\n\t\tbase3: \"\",\n\t});\n\tconst [discoveredAcids, setDiscoveredAcids] = useState({});\n\tconst [feedback, setFeedback] = useState();\n\tconst [foundOutput, setFoundOutput] = useState();\n\n\t// Initialize discoveredAcids as a list of all the acids set to false, and a counter\n\tuseEffect(() => {\n\t\tlet initialAcidsState = {\n\t\t\tacids: [],\n\t\t\tacidsCount: 0,\n\t\t\tacidsFoundCount: 0,\n\t\t};\n\t\tlet acidsCount = 0;\n\t\tfor (let acidKey in acids) {\n\t\t\tinitialAcidsState.acids[acidKey] = false;\n\t\t\tacidsCount++;\n\t\t}\n\t\tinitialAcidsState.acidsCount = acidsCount;\n\t\tsetDiscoveredAcids(initialAcidsState);\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// Build the feedback for the player. There are 2 options:\n\t\t// 1 - The bases are a valid acid! show it to the player and display additional info\n\t\t// 2 - The player has already found this amino acid\n\t\tlet isFullCombination =\n\t\t\tcombination.base1 && combination.base2 && combination.base3;\n\t\tif (isFullCombination) {\n\t\t\tlet fullComb =\n\t\t\t\tcombination.base1 + combination.base2 + combination.base3;\n\t\t\tfor (let acidKey in acids) {\n\t\t\t\tlet value = acids[acidKey];\n\t\t\t\tif (value.combinations.includes(fullComb)) {\n\t\t\t\t\tlet alreadyFound = discoveredAcids.acids[acidKey];\n\t\t\t\t\tif (alreadyFound) {\n\t\t\t\t\t\tsetFeedback(\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>{acidKey} already found!</p>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetFeedback(\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<h5>\n\t\t\t\t\t\t\t\t\t{value.fullname} ({acidKey})\n\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t<p>{value.info}</p>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlet newDiscoveredAcids = { ...discoveredAcids };\n\t\t\t\t\t\tnewDiscoveredAcids.acids[acidKey] = true;\n\t\t\t\t\t\tsetDiscoveredAcids(newDiscoveredAcids);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet acidsFoundCount = 0;\n\t\tfor (let acidKey in discoveredAcids.acids) {\n\t\t\tif (discoveredAcids.acids[acidKey]) {\n\t\t\t\tacidsFoundCount++;\n\t\t\t}\n\t\t}\n\t\tsetDiscoveredAcids((discoveredAcids) => ({\n\t\t\t...discoveredAcids,\n\t\t\tacidsFoundCount,\n\t\t}));\n\t\t// setDiscoveredAcids({ ...discoveredAcids, acidsFoundCount });\n\t}, [combination]);\n\n\tuseEffect(() => {\n\t\tsetFoundOutput(\n\t\t\t<>\n\t\t\t\t<hr className=\"resultsSeperator\" />\n\t\t\t\t<h4>\n\t\t\t\t\tYou found: ({discoveredAcids.acidsFoundCount} /\n\t\t\t\t\t{discoveredAcids.acidsCount})\n\t\t\t\t</h4>\n\t\t\t\t<ul>\n\t\t\t\t\t{discoveredAcids.acids &&\n\t\t\t\t\t\tObject.keys(discoveredAcids.acids).map((acidKey, i) => {\n\t\t\t\t\t\t\tif (discoveredAcids.acids[acidKey]) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={i}>{acids[acidKey].fullname}</li>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</>\n\t\t);\n\t}, [discoveredAcids]);\n\n\treturn (\n\t\t<div className=\"container text-center\">\n\t\t\t<h2>Amino Acids</h2>\n\t\t\t<p className=\"explanation\">\n\t\t\t\tTry to use the 3 bases (A,C,G,U) in order to discover amino\n\t\t\t\tacids!\n\t\t\t</p>\n\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"1\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"2\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\t\t\t<input\n\t\t\t\tid={inputIdPrefix + \"3\"}\n\t\t\t\tclassName=\"base-input\"\n\t\t\t\ttype={\"text\"}\n\t\t\t\tonKeyDown={keyPressed}\n\t\t\t></input>\n\n\t\t\t{feedback}\n\n\t\t\t{foundOutput}\n\n\t\t\t<div className=\"bottomElement\"></div>\n\t\t</div>\n\t);\n\n\t// Handle the user's keypress. There are 3 cases:\n\t// 1 - This is a valid base letter (A,C,U,G)\n\t// 2 - This is a backspace button in order to delete the value\n\t// 3 - Unsopported keypress\n\tfunction keyPressed(e) {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tlet currentInputIdNum = parseInt(e.target.id.slice(-1));\n\t\tlet key = e.key;\n\t\tif (key === \"Backspace\") {\n\t\t\te.target.value = \"\";\n\t\t\tif (currentInputIdNum > minInputNumber) {\n\t\t\t\tlet prevInputId = inputIdPrefix + (currentInputIdNum - 1);\n\t\t\t\tdocument.getElementById(prevInputId).focus();\n\t\t\t}\n\t\t} else if (bases.includes(key.toUpperCase())) {\n\t\t\te.target.value = key.toUpperCase();\n\t\t\tif (currentInputIdNum < maxInputNumber) {\n\t\t\t\tlet nextInputId = inputIdPrefix + (currentInputIdNum + 1);\n\t\t\t\tdocument.getElementById(nextInputId).focus();\n\t\t\t}\n\t\t}\n\n\t\tlet currentInputId = inputIdPrefix + currentInputIdNum;\n\t\tlet newCombination = { ...combination };\n\t\tnewCombination[currentInputId] = e.target.value;\n\t\tsetCombination(newCombination);\n\t}\n}\n\nexport default AminoAcidsLevel;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport AminoAcidsLevel from \"./components/AminoAcidsLevel/AminoAcidsLevel\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"App\">\n\t\t\t\t<AminoAcidsLevel />\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\t// Used this guide for connectivity with Github Pages\n\t// https://betterprogramming.pub/how-to-host-your-react-app-on-github-pages-for-free-919ad201a4cb\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}